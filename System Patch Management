Directory Structure

├── main.tf
├── variables.tf
├── outputs.tf
├── terraform.tfvars
├── README.md
└── modules/
     ├── automation_account/
     │    ├── main.tf
     │    ├── variables.tf
     │    └── outputs.tf
     ├── log_analytics/
     │    ├── main.tf
     │    ├── variables.tf
     │    └── outputs.tf
     └── update_management/
          ├── main.tf
          ├── variables.tf
          └── outputs.tf

modules/automation_account/main.tf
# Module: Automation Account
# Purpose: Creates an Azure Automation Account for scheduling patching and other automation tasks
resource "azurerm_automation_account" "automation" {
  name                = var.automation_account_name
  location            = var.location
  resource_group_name = var.resource_group_name
  sku_name            = "Basic"
  tags                = var.tags
}

variables.tf

variable "automation_account_name" {
  description = "Name of the Automation Account."
  type        = string
}
variable "location" {
  description = "Azure region for deployment."
  type        = string
}
variable "resource_group_name" {
  description = "Resource group where the account will be created."
  type        = string
}
variable "tags" {
  description = "Tags for organizing your resource."
  type        = map(string)
  default     = {}
}

outputs.tf

output "automation_account_id" {
  description = "ID of the Automation Account."
  value       = azurerm_automation_account.automation.id
}
output "automation_account_name" {
  description = "Name of the Automation Account."
  value       = azurerm_automation_account.automation.name
}
modules/log_analytics/main.tf
text
# Module: Log Analytics Workspace
# Purpose: Creates a Log Analytics Workspace to store monitoring and patch compliance data
resource "azurerm_log_analytics_workspace" "automation" {
  name                = var.workspace_name
  location            = var.location
  resource_group_name = var.resource_group_name
  sku                 = var.sku
  retention_in_days   = 30
  tags                = var.tags
}

variables.tf

variable "workspace_name" {
  description = "Name of the Log Analytics Workspace."
  type        = string
}
variable "location" {
  description = "Azure region for deployment."
  type        = string
}
variable "resource_group_name" {
  description = "Resource group for the workspace."
  type        = string
}
variable "sku" {
  description = "SKU for the Log Analytics Workspace."
  type        = string
  default     = ""
}
variable "tags" {
  description = "Tags for organizing your resource."
  type        = map(string)
  default     = {}
}


outputs.tf

output "workspace_id" {
  description = "ID of the Log Analytics Workspace."
  value       = azurerm_log_analytics_workspace.automation.id
}
output "workspace_name" {
  description = "Name of the Log Analytics Workspace."
  value       = azurerm_log_analytics_workspace.automation.name
}


modules/update_management/main.tf

# Module: Update Management
# Purpose: Configure update (patch) management for Azure VM via Automation and Log Analytics
resource "azurerm_automation_update_management_schedule" "schedule" {
  name                  = var.schedule_name
  automation_account_id = var.automation_account_id
  enabled               = true
  operating_system      = var.operating_system
  start_time            = var.start_time       # Format: "2025-08-01T22:00:00Z"
  expiry_time           = ""
  interval              = 1
  frequency             = "Week"
  time_zone             = var.time_zone        # Example: "UTC"
  week_days             = var.week_days        # Example: ["Monday"]
  description           = "Weekly patch deployment schedule"
}

resource "azurerm_automation_update_management_configuration" "config" {
  name                   = "${var.configuration_name}-${substr(uuid(),0,6)}"
  automation_account_id  = var.automation_account_id
  operating_system       = var.operating_system
  duration               = 180                 # Patch run duration in minutes
  reboot_setting         = "IfRequired"
  targets {
    azure_virtual_machine_ids = var.vm_ids
  }
  non_azure_computer_names    = []
  schedule_id                 = azurerm_automation_update_management_schedule.schedule.id
}

variables.tf

variable "configuration_name" {
  description = "Base name for the update configuration."
  type        = string
}
variable "automation_account_id" {
  description = "ID of the Automation Account."
  type        = string
}
variable "operating_system" {
  description = "Target OS (Linux or Windows)."
  type        = string
  default     = "Linux"
}
variable "vm_ids" {
  description = "List of VM resource IDs to link to update mgmt."
  type        = list(string)
}
variable "start_time" {
  description = "ISO 8601 date-time for the update schedule to start."
  type        = string
}
variable "week_days" {
  description = "List of days (e.g., [\"Monday\"]) patches are run."
  type        = list(string)
  default     = ["Monday"]
}
variable "schedule_name" {
  description = "Name for the patch schedule."
  type        = string
}
variable "time_zone" {
  description = "Time zone for the patch schedule. E.g., \"UTC\""
  type        = string
  default     = "UTC"
}


outputs.tf

output "schedule_id" {
  description = "ID of the patch schedule."
  value       = azurerm_automation_update_management_schedule.schedule.id
}
output "configuration_id" {
  description = "ID of the update mgmt configuration."
  value       = azurerm_automation_update_management_configuration.config.id
}
Example Root Usage (main.tf)
text
provider "azurerm" {
  features {}
}

resource "azurerm_resource_group" "main" {
  name     = var.resource_group_name
  location = var.location
  tags     = var.tags
}

# Automation Account Module
module "automation" {
  source                  = "./modules/automation_account"
  automation_account_name = var.automation_account_name
  location                = var.location
  resource_group_name     = var.resource_group_name
  tags                    = var.tags
}

# Log Analytics Workspace Module
module "log_analytics" {
  source              = "./modules/log_analytics"
  workspace_name      = var.workspace_name
  location            = var.location
  resource_group_name = var.resource_group_name
  tags                = var.tags
}

# Example: Pass VM id(s) (from previous deployment)
locals {
  vm_ids = var.linked_vm_ids
}

# Update Management Module
module "update_management" {
  source               = "./modules/update_management"
  configuration_name   = var.update_config_name
  automation_account_id= module.automation.automation_account_id
  operating_system     = "Linux"
  vm_ids               = local.vm_ids
  start_time           = var.schedule_start_time
  week_days            = var.schedule_week_days
  schedule_name        = var.schedule_name
  time_zone            = var.schedule_time_zone
}
variables.tf (Root)
text
variable "resource_group_name" {
  description = "Name of resource group."
  type        = string
}

variable "location" {
  description = "Azure region for deployment."
  type        = string
}

variable "automation_account_name" {
  description = "Name of Automation Account."
  type        = string
}

variable "workspace_name" {
  description = "Name of Log Analytics Workspace."
  type        = string
}

variable "update_config_name" {
  description = "Name for the update management configuration."
  type        = string
}
variable "linked_vm_ids" {
  description = "List of VM resource IDs to patch (from previous setup)."
  type        = list(string)
}

variable "tags" {
  description = "Tags to apply to all resources."
  type        = map(string)
  default     = { Environment = "Production" }
}

variable "schedule_start_time" {
  description = "Start time for patch schedule (ISO 8601, UTC, e.g. 2025-08-25T02:00:00Z)."
  type        = string
}

variable "schedule_week_days" {
  description = "Days of week to run patching, e.g., [\"Monday\"]."
  type        = list(string)
  default     = ["Monday"]
}

variable "schedule_name" {
  description = "Name for scheduled patch deployment."
  type        = string
  default     = "weekly-patch"
}

variable "schedule_time_zone" {
  description = "Time zone for schedule; defaults UTC."
  type        = string
  default     = "UTC"
}


terraform.tfvars Example

resource_group_name        = "web-demo-rg"
location                  = "East US"
automation_account_name    = "web-demo-automation"
workspace_name            = "web-demo-laworkspace"
update_config_name        = "weekly-linux-patch"
tags                      = { Environment = "Production" }
linked_vm_ids             = ["/subscriptions/<sub_id>/resourceGroups/web-demo-rg/providers/Microsoft.Compute/virtualMachines/web-demo-vm"]
schedule_start_time       = "2025-08-26T02:00:00Z"
schedule_week_days        = ["Tuesday"]
schedule_name             = "webserver-patch-tuesday"
schedule_time_zone        = "UTC"


README.md

## Prerequisites

Before you begin, ensure you have:

* **Azure Subscription:** An active Azure subscription.
* **Azure CLI:** Installed and configured (`az login`).
* **Terraform:** Installed (version 1.0+ recommended).
* **Target VMs:** Virtual machines in Azure that you intend to patch. ** These VMs must have the Log Analytics agent installed and configured to report to the Log Analytics Workspace created by this solution.** This can be done manually, via Azure Policy, or using VM extensions. This Terraform code sets up the infrastructure, but *does not* automatically install agents on existing VMs.

## Deployment Steps

Follow these steps to deploy the patch management solution:

1.  **Clone the Repository:**
    ```bash
    git clone <repository-url>
    cd <repository-directory>
    ```

2.  **Initialize Terraform:**
    Navigate to the root directory where `main.tf` is located and initialize Terraform. This downloads the necessary providers and modules.
    ```bash
    terraform init
    ```

3.  **Review and Plan:**
    Generate an execution plan to see what resources Terraform will create, modify, or destroy. This is a crucial step to ensure the deployment aligns with your expectations.
    ```bash
    terraform plan
    ```
    * **Important:** Review the `variables.tf` file in the root directory and modify default values (like `location`, `patch_schedule_start_time`, or `target_vm_ids`) if needed, before running `terraform apply`.

4.  **Apply the Configuration:**
    If the plan looks good, apply the Terraform configuration. Confirm with `yes` when prompted.
    ```bash
    terraform apply
    ```
    This command will create the Log Analytics Workspace, Azure Automation Account, link them, and configure the weekly software update deployment.

## Monitoring Patch Compliance

Once your patch management infrastructure is deployed, monitoring patch compliance is crucial. Azure provides several ways to do this, primarily through the Azure portal and Log Analytics.

### 1. Azure Portal - Update Management Blade

The most straightforward way to monitor compliance is directly within the **Azure portal**:

* **Navigate to your Automation Account:** Search for "Automation Accounts" and select the one you deployed (e.g., `aa-patch-management-001`).
* Under "Update Management," click on **"Update Management."**

Here, you'll find a comprehensive overview:
* **Missing Updates:** A dashboard showing how many updates are missing across your managed machines.
* **Compliance:** A breakdown of machines by their compliance status (compliant, non-compliant, unknown).
* **Update Deployments:** A history of your scheduled update deployments, including their status (Succeeded, Failed, In progress). Click on a specific deployment to see details like which machines were included, which updates were installed, and any errors.

### 2. Log Analytics Workspace - Update Logs

All data collected by Update Management is stored in your Log Analytics Workspace. You can query this data directly using Kusto Query Language (KQL) for more granular insights.

* **Navigate to your Log Analytics Workspace:** Search for "Log Analytics workspaces" and select the one you deployed (e.g., `law-patch-management-001`).
* Under "General," click on **"Logs."**

Here are some useful KQL queries:

* **Overall Update Compliance:**
    This query gives you a summary of missing updates by computer.
    ```kusto
    Update
    | where TimeGenerated > ago(30d)
    | where UpdateState == "Missing"
    | summarize count() by Computer, OSType, Optional
    | order by count_ desc
    ```

* **Updates Successfully Installed in a Deployment:**
    To see which updates were *installed* during a specific update deployment run. You'll need the `CorrelationId` from the Update Deployment logs in the portal.
    ```kusto
    UpdateRunProgress
    | where CorrelationId == "<Your_Update_Deployment_Correlation_ID>" // Replace with actual CorrelationId
    | where UpdateState == "Installed"
    | summarize count() by UpdateTitle, Computer
    ```

* **Machines with Missing Critical/Security Updates:**
    Focus on the most important updates.
    ```kusto
    Update
    | where TimeGenerated > ago(7d)
    | where UpdateState == "Missing"
    | where Classification has "Security" or Classification has "Critical"
    | summarize count() by Computer, UpdateTitle
    | order by Computer asc
    ```

* **Update Deployment History (High-level):**
    This query looks at the `UpdateSummary` table for a general overview of update runs.
    ```kusto
    UpdateSummary
    | where TimeGenerated > ago(30d)
    | summarize arg_max(TimeGenerated, *) by Computer
    | project Computer, OsType, LastUpdated, UpdatesMissing, UpdatesInstalled, OtherUpdates, WindowsUpdateSetting, ComputerGroup
    ```

### 3. Azure Workbooks (Custom Dashboards)

For more sophisticated and shareable monitoring dashboards, you can create **Azure Workbooks** within Log Analytics. These allow you to combine text, log queries, metrics, and parameters into rich interactive reports.

* From your Log Analytics Workspace, navigate to **"Workbooks"** under "General."
* You can start with a blank workbook or explore existing templates to build custom dashboards focused on patch compliance trends, specific update statuses, or historical data.
