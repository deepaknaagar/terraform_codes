Directory Structure

├── main.tf
├── variables.tf
├── outputs.tf
├── providers.tf
├── terraform.tfvars
├── README.md
└── modules/
    ├── vnet/
    │   ├── main.tf
    │   ├── variables.tf
    │   └── outputs.tf
    ├── nsg/
    │   ├── main.tf
    │   ├── variables.tf
    │   └── outputs.tf
    └── vm/
        ├── main.tf
        ├── variables.tf
        └── outputs.tf
├── cloud-init-nginx.yml


modules/vnet/main.tf

# This module creates an Azure Virtual Network and an associated Subnet.
resource "azurerm_virtual_network" "vnet" {
  name                = var.vnet_name
  location            = var.location
  resource_group_name = var.resource_group_name
  address_space       = var.address_space
  tags                = var.tags
}

resource "azurerm_subnet" "subnet" {
  name                 = var.subnet_name
  resource_group_name  = var.resource_group_name
  virtual_network_name = azurerm_virtual_network.vnet.name
  address_prefixes     = [var.subnet_prefix]
}

modules/vnet/variables.tf

variable "vnet_name" { description = "Name of the Virtual Network."; type = string }
variable "location" { description = "Region for the Virtual Network."; type = string }
variable "resource_group_name" { description = "Azure Resource Group name."; type = string }
variable "address_space" { description = "CIDR blocks for the VNet address space."; type = list(string) }
variable "subnet_name" { description = "Name of the Subnet."; type = string }
variable "subnet_prefix" { description = "CIDR for the Subnet."; type = string }
variable "tags" { description = "Tags for the VNet and Subnet."; type = map(string); default = {} }
modules/vnet/outputs.tf

output "vnet_id" { description = "Azure VNet Resource ID."; value = azurerm_virtual_network.vnet.id }
output "subnet_id" { description = "Azure Subnet Resource ID."; value = azurerm_subnet.subnet.id }
modules/nsg/main.tf


modules/nsg/main.tf

# This module provisions an NSG and adds custom security rules for SSH and HTTP.
resource "azurerm_network_security_group" "nsg" {
  name                = var.nsg_name
  location            = var.location
  resource_group_name = var.resource_group_name
  tags                = var.tags
}

resource "azurerm_network_security_rule" "custom_rules" {
  count                       = length(var.nsg_rules)
  name                        = var.nsg_rules[count.index].name
  priority                    = var.nsg_rules[count.index].priority
  direction                   = var.nsg_rules[count.index].direction
  access                      = var.nsg_rules[count.index].access
  protocol                    = var.nsg_rules[count.index].protocol
  source_port_range           = var.nsg_rules[count.index].source_port_range
  destination_port_range      = var.nsg_rules[count.index].destination_port_range
  source_address_prefix       = var.nsg_rules[count.index].source_address_prefix
  destination_address_prefix  = var.nsg_rules[count.index].destination_address_prefix
  resource_group_name         = var.resource_group_name
  network_security_group_name = azurerm_network_security_group.nsg.name
}

modules/nsg/variables.tf

variable "nsg_name" { description = "Name of the Network Security Group."; type = string }
variable "location" { description = "Region for NSG."; type = string }
variable "resource_group_name" { description = "Azure Resource Group name."; type = string }
variable "nsg_rules" {
  description = "List of custom NSG rules.";
  type = list(object({
    name = string
    priority = number
    direction = string
    access = string
    protocol = string
    source_port_range = string
    destination_port_range = string
    source_address_prefix = string
    destination_address_prefix = string
  }))
}
variable "tags" { description = "Tags for NSG."; type = map(string); default = {} }

modules/nsg/outputs.tf

output "nsg_id" { description = "NSG Resource ID."; value = azurerm_network_security_group.nsg.id }
output "nsg_name" { description = "NSG name."; value = azurerm_network_security_group.nsg.name }



modules/vm/main.tf

# This module provisions a Linux VM with a public IP, NIC, NSG association, and cloud-init bootstrapping.

resource "azurerm_public_ip" "vm_pip" {
  name                = "${var.vm_name}-pip"
  location            = var.location
  resource_group_name = var.resource_group_name
  allocation_method   = "Static"
  sku                 = "Standard"
  tags                = var.tags
}

resource "azurerm_network_interface" "nic" {
  name                = "${var.vm_name}-nic"
  location            = var.location
  resource_group_name = var.resource_group_name

  ip_configuration {
    name                          = "ipconfig1"
    subnet_id                     = var.subnet_id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.vm_pip.id
  }
}

resource "azurerm_network_interface_security_group_association" "assoc" {
  network_interface_id      = azurerm_network_interface.nic.id
  network_security_group_id = var.nsg_id
}

resource "azurerm_linux_virtual_machine" "vm" {
  name                  = var.vm_name
  location              = var.location
  resource_group_name   = var.resource_group_name
  size                  = var.vm_size
  admin_username        = var.admin_username
  network_interface_ids = [azurerm_network_interface.nic.id]
  tags                  = var.tags

  admin_ssh_key {
    username   = var.admin_username
    public_key = var.admin_ssh_key
  }

  # cloud-init script to bootstrap NGINX or Apache, passed from root
  custom_data = var.custom_data

  os_disk {
    name                 = "${var.vm_name}-osdisk"
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "20_04-lts-gen2"
    version   = "latest"
  }
}

modules/vm/variables.tf

variable "vm_name" { description = "Name of the Virtual Machine."; type = string }
variable "location" { description = "Region for VM."; type = string }
variable "resource_group_name" { description = "Azure Resource Group name."; type = string }
variable "subnet_id" { description = "Subnet ID for VM NIC."; type = string }
variable "nsg_id" { description = "NSG ID for NIC association."; type = string }
variable "vm_size" { description = "Size of the VM instance."; type = string; default = "Standard_B2s" }
variable "admin_username" { description = "Linux admin username."; type = string; default = "azureuser" }
variable "admin_ssh_key" { description = "SSH public key for admin user."; type = string }
variable "custom_data" { description = "cloud-init script (YAML)."; type = string }
variable "tags" { description = "Tags for VM and resources."; type = map(string); default = {} }
modules/vm/outputs.tf

output "vm_id" { description = "VM Resource ID."; value = azurerm_linux_virtual_machine.vm.id }
output "public_ip" { description = "Public IP of VM."; value = azurerm_public_ip.vm_pip.ip_address }
output "nic_id" { description = "VM NIC Resource ID."; value = azurerm_network_interface.nic.id }



Root Files

main.tf

# Root: Orchestrates all modules to deploy Linux VM web server in secure Azure VNet environment

provider "azurerm" {
  features {}
}

resource "azurerm_resource_group" "main" {
  name     = var.resource_group_name
  location = var.location
  tags     = var.tags
}

module "vnet" {
  source              = "./modules/vnet"
  vnet_name           = var.vnet_name
  location            = var.location
  resource_group_name = azurerm_resource_group.main.name
  address_space       = var.vnet_address_space
  subnet_name         = var.subnet_name
  subnet_prefix       = var.subnet_prefix
  tags                = var.tags
}

module "nsg" {
  source              = "./modules/nsg"
  nsg_name            = var.nsg_name
  location            = var.location
  resource_group_name = azurerm_resource_group.main.name
  nsg_rules           = var.nsg_rules
  tags                = var.tags
}

module "vm" {
  source              = "./modules/vm"
  vm_name             = var.vm_name
  location            = var.location
  resource_group_name = azurerm_resource_group.main.name
  subnet_id           = module.vnet.subnet_id
  nsg_id              = module.nsg.nsg_id
  vm_size             = var.vm_size
  admin_username      = var.admin_username
  admin_ssh_key       = file(var.admin_ssh_key_path)
  custom_data         = file("cloud-init-nginx.yml")
  tags                = var.tags
}

variables.tf

variable "resource_group_name" { description = "Resource group for all resources."; type = string; default = "webdemo-rg" }
variable "location" { description = "Azure location/region."; type = string; default = "East US" }
variable "tags" { description = "Global resource tags."; type = map(string); default = { Environment = "Production" } }

variable "vnet_name" { description = "Virtual Network name."; type = string; default = "webdemo-vnet" }
variable "vnet_address_space" { description = "VNet address space CIDRs."; type = list(string); default = ["10.30.0.0/16"] }
variable "subnet_name" { description = "Subnet name."; type = string; default = "webdemo-subnet" }
variable "subnet_prefix" { description = "Subnet CIDR prefix."; type = string; default = "10.30.1.0/24" }

variable "nsg_name" { description = "NSG name."; type = string; default = "webdemo-nsg" }
variable "nsg_rules" {
  description = "Ingress rules for NSG, allowing SSH and HTTP.";
  type = list(object({
    name = string
    priority = number
    direction = string
    access = string
    protocol = string
    source_port_range = string
    destination_port_range = string
    source_address_prefix = string
    destination_address_prefix = string
  }))
  default = [
    {
      name = "Allow-SSH"
      priority = 1001
      direction = "Inbound"
      access = "Allow"
      protocol = "Tcp"
      source_port_range = "*"
      destination_port_range = "22"
      source_address_prefix = "*"
      destination_address_prefix = "*"
    },
    {
      name = "Allow-HTTP"
      priority = 1002
      direction = "Inbound"
      access = "Allow"
      protocol = "Tcp"
      source_port_range = "*"
      destination_port_range = "80"
      source_address_prefix = "*"
      destination_address_prefix = "*"
    }
  ]
}

variable "vm_name" { description = "Linux VM name."; type = string; default = "webdemo-vm" }
variable "vm_size" { description = "Azure VM size."; type = string; default = "Standard_B2s" }
variable "admin_username" { description = "Admin username for VM."; type = string; default = "azureuser" }
variable "admin_ssh_key_path" { description = "Local path to SSH public key."; type = string; default = "~/.ssh/id_rsa.pub" }
outputs.tf

output "vm_public_ip" { description = "VM Public IP address."; value = module.vm.public_ip }
output "vm_id" { description = "Azure Resource ID of the VM."; value = module.vm.vm_id }
output "subnet_id" { description = "Subnet Resource ID for VM NIC."; value = module.vnet.subnet_id }


terraform.tfvars

# User-config variable values for your deployment

resource_group_name = "webdemo-rg"
location           = "East US"
tags = {
  Environment = "Production"
  Owner       = "YourName"
  Project     = "AzureWebDemo"
}

vnet_name          = "webdemo-vnet"
vnet_address_space = ["10.30.0.0/16"]
subnet_name        = "webdemo-subnet"
subnet_prefix      = "10.30.1.0/24"

nsg_name = "webdemo-nsg"
nsg_rules = [
  {
    name = "Allow-SSH"
    priority = 1001
    direction = "Inbound"
    access = "Allow"
    protocol = "Tcp"
    source_port_range = "*"
    destination_port_range = "22"
    source_address_prefix = "*"
    destination_address_prefix = "*"
  },
  {
    name = "Allow-HTTP"
    priority = 1002
    direction = "Inbound"
    access = "Allow"
    protocol = "Tcp"
    source_port_range = "*"
    destination_port_range = "80"
    source_address_prefix = "*"
    destination_address_prefix = "*"
  }
]

vm_name           = "webdemo-vm"
vm_size           = "Standard_B2s"
admin_username    = "azureuser"
admin_ssh_key_path = "~/.ssh/id_rsa.pub"
providers.tf

# Configure Azure RM provider for deploying resources
provider "azurerm" {
  features {}
}


cloud-init-nginx.yml

#cloud-config
package_update: true
package_upgrade: true
packages:
  - nginx
runcmd:
  - systemctl enable nginx
  - systemctl start nginx



README.md

# Azure Linux Web Server Deployment (Terraform Modules)

## Project Overview
This setup builds a secure, modular, and maintainable Azure infrastructure using Terraform. Resources are separated into reusable modules for Virtual Networks, Network Security Groups, and Linux Virtual Machines, adhering to best practices for production.

## Modules
- **modules/vnet:** Deploys a VNet and Subnet.
- **modules/nsg:** Creates NSG with SSH/HTTP ingress rules.
- **modules/vm:** Provisions Linux VM, NIC, public IP, and associates with subnet and NSG. Uses cloud-init to automatically install NGINX (or Apache).

## Usage Instructions
1. Install [Terraform](https://terraform.io) and [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli).
2. Ensure your SSH public key is present at the path specified in `terraform.tfvars` (default: `~/.ssh/id_rsa.pub`).
3. Clone/download this repository and adjust values in `terraform.tfvars` as needed.
4. (Optional) Edit `cloud-init-nginx.yml` to customize your web server bootstrap (NGINX/Apache).
5. Initialize Terraform:
terraform init


6. Review planned infrastructure:
terraform plan


7. Deploy infrastructure:
terraform apply


8. Retrieve your VM's public IP:
terraform output vm_public_ip


9. Access your VM:
- SSH: `ssh azureuser@<public_ip>`
- Web: Visit `http://<public_ip>/` to see default NGINX (or Apache) page.

## Module Documentation
- Review each module's `variables.tf` and `outputs.tf` for expected inputs and exported values.
- Adjust input variables via `terraform.tfvars`.

## Cleaning Up
To destroy resources after testing and avoid Azure charges:
terraform destroy
